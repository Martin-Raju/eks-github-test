name: Deploy EKS Cluster with Terraform

on:
  push:
    branches:
      - develop  # Triggers on push to the main branch
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    defaults:
      run:
        working-directory: Terraform/environment/dev  # Set this if your Terraform code is in a subfolder

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6  # Use the Terraform version compatible with your code

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  install-argocd:
    name: 'Install Argo CD on EKS'
    runs-on: ubuntu-latest
    needs: terraform  # Wait for EKS cluster to be deployed

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig to access EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Create Argo CD namespace
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

      - name: Add Argo Helm repo
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update

      - name: Install Argo CD
        run: |
          helm upgrade --install argocd argo/argo-cd \
           --namespace argocd --create-namespace \
           --set server.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-internal"="true"

      - name: Get Argo CD URL
        run: |
         ELB_HOST=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
         echo "Argo CD URL: http://$ELB_HOST"

      - name: Apply Argo CD Ingress YAML
        run: |
          kubectl apply -f ArgoCD/argocd-ingress.yaml
