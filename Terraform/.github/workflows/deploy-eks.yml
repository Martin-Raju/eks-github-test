name: Deploy and Expose Argo CD on EKS

on:
  workflow_dispatch:
  push:
    branches:
      - develop

jobs:
  terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    defaults:
      run:
        working-directory: Terraform/environment/dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  install-argocd:
    name: 'Install Argo CD on EKS'
    runs-on: ubuntu-latest
    needs: terraform

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      - name: Save kubeconfig as artifact
        run: |
          mkdir -p kube
          cp ~/.kube/config kube/kubeconfig.yaml
        shell: bash

      - name: Upload kubeconfig
        uses: actions/upload-artifact@v3
        with:
          name: kubeconfig
          path: kube/kubeconfig.yaml

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Create Argo CD namespace
        run: kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

      - name: Add Argo Helm repo
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update

      - name: Install Argo CD
        run: |
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd --create-namespace

  expose-argocd:
    name: 'Expose Argo CD Service'
    runs-on: ubuntu-latest
    needs: install-argocd

    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download kubeconfig artifact
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: .

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Patch argocd-server service to LoadBalancer
        run: |
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

      - name: Wait for LoadBalancer hostname
        id: wait-for-lb
        run: |
          for i in {1..30}; do
            ELB_HOST=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$ELB_HOST" ]; then
              echo "ELB hostname found: $ELB_HOST"
              echo "elb_host=$ELB_HOST" >> "$GITHUB_OUTPUT"
              break
            fi
            echo "Waiting for ELB hostname... attempt $i"
            sleep 10
          done

      - name: Show Argo CD URL
        run: |
          echo "Argo CD URL: http://${{ steps.wait-for-lb.outputs.elb_host }}"